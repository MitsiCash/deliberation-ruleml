namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dcterms:title [ "RuleML Positional Independence" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/unordered_groups_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, positional independence" ]
dcterms:description [ "The expansion module for positional independence." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed

## The main section of an atomic formula contains an operator edge and a collection of argument edges.
## Pre-fix operator notation for atomic formulas is optional in the relaxed-form serialization.
## This pattern cannot be translated accurately into XSD.
Atom.main |= operatorForAtoms-edge.choice & argumentsForAtoms.sequence

## Slotted arguments and positional arguments in atomic formulas
## may be interleaved in the relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
argumentsForAtoms.sequence |= positionalArgumentsForAtoms.sequence & slotsForAtoms.sequence

## Positional rest arguments in atomic formulas may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
positionalArgumentsForAtoms.sequence |=
  termsForAtoms.sequence & restOfPositionalArguments-edge.choice?

## Slotted rest arguments in atomic formulas may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
slotsForAtoms.sequence |= slotdepTermsForAtoms.sequence & slotTermsForAtoms.sequence & restOfSlots-edge.choice?

## The main section of a functional expression contains an operator edge and a collection of argument edges.
## Pre-fix operator notation for expressions is optional in the relaxed-form serialization.
## This pattern cannot be translated accurately into XSD.
Expr.main |= operatorForExpressions-edge.choice & argumentsForExpressions.sequence

## Slotted arguments and positional arguments in expressions 
## may be interleaved in the relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
argumentsForExpressions.sequence |=
  positionalArgumentsForExpressions.sequence & slotsForExpressions.sequence

## Positional rest arguments in expressions may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
positionalArgumentsForExpressions.sequence |=
  termsForExpressions.sequence & restOfPositionalArguments-edge.choice?

## Slotted rest arguments in expressions may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
slotsForExpressions.sequence |= slotdepTermsForExpressions.sequence & slotTermsForExpressions.sequence & restOfSlots-edge.choice?

## The main section of an implication contains two edges, a premise (body, if) edge and a conclusion (head, then) edge.
## In the relaxed-form serialization, the if and then 
## of an implication can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Implies.main |= body_Implies.name.choice & head_Implies.name.choice

## In the relaxed-form serialization, the if and then 
## of a proof-theoretic entailment can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Entails.main |= body_Entails.name.choice & head_Entails.name.choice

## In the relaxed-form serialization, the header element sequence is:
## an optional header element sequence as defined in Node.header, interleaved with optional
## object identifier and degree
## This pattern can be translated accurately into XSD using xs:any, but is not correctly translated by the Trang software.
TruthValuedConnective.header &= (Node.header? & degree-edge.choice?)?
Atom.header &= (Node.header? & objectIdentifier-edge.choice? & degree-edge.choice?)?
Expr.header &= (Node.header? & exprObjectIdentifier-edge.choice?)?
# 
# 
# STRIPE-SKIPPING AND POSITIONAL-INDEPENDENCE
# RELAX NG ENHANCEMENT

## non-linear interaction of stripe-skipping and relaxed-form serialization
## allows asynchronous stripe-skipping and if-then order reversal
Implies.main |= head_Implies-ss.content, body_Implies.name.choice
Implies.main |= head_Implies.name.choice, body_Implies-ss.content

## non-linear interaction of stripe-skipping and relaxed-form serialization
## allows asynchronous stripe-skipping and if-then order reversal
Entails.main |= head_Entails-ss.content, body_Entails.name.choice
Entails.main |= head_Entails.name.choice, body_Entails-ss.content
