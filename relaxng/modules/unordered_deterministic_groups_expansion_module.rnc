namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dcterms:title [ "RuleML Positional Independence - Deterministic" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/unordered_deterministic_groups_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, positional independence, deterministic" ]
dcterms:description [ "The expansion module for deterministic positional independence." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed

## The main section of an atomic formula contains an operator edge and a collection of argument edges.
## Pre-fix operator notation for atomic formulas is required in a deterministic serialization.
Atom.main |= operatorForAtoms-edge.choice, argumentsForAtoms.sequence

## Slotted arguments may precede or  follow positional arguments 
## in atomic formulas in the deterministic serialization. 
argumentsForAtoms.sequence |=
  slotdepTermsForAtoms.sequence, slotTermsForAtoms.sequence,
   (((( termsForAtoms.nonemptysequence.choice, repo?) | repo)  | tuplesForAtoms.nonemptysequence.choice ),
   slotdepTermsForAtoms.sequence, slotTermsForAtoms.sequence)?,
  resl?
repo = restOfPositionalArguments-edge.choice
resl = restOfSlots-edge.choice

## Positional rest arguments in atomic formulas may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
positionalArgumentsForAtoms.sequence |=
  termsForAtoms.sequence, restOfPositionalArguments-edge.choice?

##
tuplesForAtoms.nonemptysequence.choice |= (tupdepTerms.nonemptysequence.choice , tupTerms.sequence)  | tupTerms.nonemptysequence.choice 

## The main section of a functional expression contains an operator edge and a collection of argument edges.
## Pre-fix operator notation for expressions is required in the deterministic serialization.
Expr.main |= operatorForExpressions-edge.choice, argumentsForExpressions.sequence

## Slotted arguments may precede or  follow positional arguments 
## in the deterministic serialization. 
argumentsForExpressions.sequence |=
  slotdepTermsForExpressions.sequence, slotTermsForExpressions.sequence,
   (((( termsForExpressions.nonemptysequence.choice, repo?) | repo)  | tuplesForExpressions.nonemptysequence.choice ),
   slotdepTermsForExpressions.sequence, slotTermsForExpressions.sequence)?,
  resl?

##
tuplesForExpressions.nonemptysequence.choice |= (tupdepTerms.nonemptysequence.choice , tupTerms.sequence)  | tupTerms.nonemptysequence.choice 

## Positional rest arguments follow the ordinary positional arguments
## in expressions in the deterministic serialization. 
positionalArgumentsForExpressions.sequence |=
  termsForExpressions.sequence, restOfPositionalArguments-edge.choice?

## Slotted rest arguments follow the ordinary slots
## in expressions in the deterministic serialization. 
slotsForExpressions.sequence |= slotTermsForExpressions.sequence, resl?

## The main section of an implication contains two edges, a premise (body, if) edge and a conclusion (head, then) edge.
## In the deterministic serialization, the if and then 
## of an implication can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Implies.main |= body_Implies.name.choice , head_Implies.name.choice
Implies.main |= head_Implies.name.choice , body_Implies.name.choice

## In the deterministic serialization, the if and then 
## of a proof-theoretic entailment can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Entails.main |= body_Entails.name.choice , head_Entails.name.choice
Entails.main |= head_Entails.name.choice , body_Entails.name.choice

## In the deterministic serialization, the order of header elements is:
## an optional header element sequence as defined in Node.header, followed by optional
## object identifier and degree
TruthValuedConnective.header &= (Node.header?, degree-edge.choice?)?
Atom.header &= (Node.header?, objectIdentifier-edge.choice?, degree-edge.choice?)?
Expr.header &= (Node.header?, exprObjectIdentifier-edge.choice?)?
